import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Sample customer purchase data (replace with actual data)
data = {
    'CustomerID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Annual_Spend': [500, 1500, 800, 2000, 2500, 1000, 1800, 2200, 300, 700],
    'Frequency': [10, 40, 20, 60, 80, 25, 55, 70, 5, 15]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Selecting features for clustering
X = df[['Annual_Spend', 'Frequency']]

# Standardizing the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Finding the optimal number of clusters using the Elbow Method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plot the Elbow graph
plt.plot(range(1, 11), wcss, marker='o')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.title('Elbow Method')
plt.show()

# Applying K-means clustering
optimal_clusters = 3  # Change based on Elbow Method result
kmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', random_state=42)
df['Cluster'] = kmeans.fit_predict(X_scaled)

# Visualizing the clusters
plt.scatter(df['Annual_Spend'], df['Frequency'], c=df['Cluster'], cmap='viridis', edgecolors='k')
plt.xlabel('Annual Spend')
plt.ylabel('Frequency')
plt.title('Customer Segmentation')
plt.colorbar(label='Cluster')
plt.show()

# Displaying clustered data
print(df)
